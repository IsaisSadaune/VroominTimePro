//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Inputs/CarInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarInput"",
    ""maps"": [
        {
            ""name"": ""VroominTimeAM"",
            ""id"": ""8ebb5754-0417-4f56-a5d7-0ee1ec78af87"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""e78ec867-74b7-4815-a57f-ad8637ca553a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Value"",
                    ""id"": ""d2a06e32-7475-40a2-977b-f22343017899"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""bb4882a0-d9a1-472e-b9eb-f8f3807306c7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""436048cf-bfc5-443c-a9ad-4ebd4f4c18b5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""651b0568-1c3f-4c71-b0b1-7bf76c000806"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d39f7663-a4f7-450e-8663-091acbe78d87"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5bde7845-d5c3-4d25-a970-0353b45100bc"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2369de8a-5b60-406e-8e83-d4b9ab8e1788"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c4b8205e-5731-40eb-96a2-49936de94493"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""41accfe8-2b73-40ea-be3a-54897a6f4d20"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f6dd7e5e-bfca-45de-98a3-66ee68e9f5e3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b19671e6-19e1-49e1-9da8-e14ffb70f68e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""327a330a-cfbc-49ea-900b-71f362a15ae8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eafc7d7c-20b7-4893-a68b-e20694c13936"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a7d6e04-4b73-43cc-a5d4-7c9eb39e44c0"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68c0f757-d2ec-4069-b5f6-79667cfe601f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuinTimeAM"",
            ""id"": ""92fc6ad6-012c-48b1-be89-1f1be350d5fd"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""655efdff-6aa1-48e2-8f63-e1d8cfa9ed04"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Value"",
                    ""id"": ""20f0cec0-95f8-4ace-a1de-a4fac71cdda8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Leave"",
                    ""type"": ""Button"",
                    ""id"": ""c2debce1-e1b8-4979-8275-59640721f618"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=3)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1c7b82dd-9149-4a47-8e10-a7bca943cb94"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""537e8b9d-9567-4a94-a39c-52ae8edaa1f9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9b2e80dc-607f-492e-973a-082456ca378b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4c95da5a-1382-4771-bcc0-2e1d0cfd6fd8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fe6f1b23-f5ee-4e1d-8a38-48c14e075e8c"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""11e415b0-25ae-4a4a-b2df-49863228b6d5"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""03d6ffc5-83d9-4dd7-9fc1-5cbc9e1a8c04"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d51f36ab-7625-4572-9632-482eb49606eb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bb44b346-efdb-4805-accf-c6fe9e6d4e9f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""38ab9dd2-01cd-4a35-a26a-9582fab95c8b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""22c40898-49ec-47c2-91f8-e16647eb6d98"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edcb03fd-5422-4e85-bba4-21b9b20c1004"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2a5a144-1a46-4fd6-ae48-fda5d37a805c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""955d4f50-261c-4d91-a4b8-3a43c9baeb5f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b97f721f-afc9-4ce8-a824-5620d4e5ca49"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Leave"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b28cfea-e4bb-4e1f-b00f-1b3cea3087a9"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Leave"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TileinTime"",
            ""id"": ""812b5286-cc96-4ae6-b519-8fa31a05ef98"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Value"",
                    ""id"": ""f074f92f-b3af-4ece-a710-42d7aba6cb42"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Debug"",
                    ""type"": ""Button"",
                    ""id"": ""ed16c32b-b6eb-4ca3-98af-7746745df3b4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""16e93933-2510-4d65-90cc-c5fcc7fc8cc2"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""fbc969a2-4d9f-4ac5-8444-e0d8c70ea6e5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fcf609df-1c86-447d-a705-f290d1124db8"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""33ec9bd4-97e3-4a2d-bfdb-dfe9e56bf8d5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""50e3dd57-945a-4622-97b9-2e6fb1938063"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""61c0fddd-ebdd-45d3-a143-4e774dcc1c74"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""88f3ce26-e00d-4e26-98d0-86c9151cae95"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b738ab4-ac57-49a7-85f8-7660667926ce"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Vide"",
            ""id"": ""91addce0-e3c4-46b6-8f75-8a2032bda68e"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""cb2e0629-9554-47b6-a2a2-cf6b7c9fb9ff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""53a90bf9-16b4-4e68-bbe4-7c2b6375c5ef"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ClavierSouris"",
            ""bindingGroup"": ""ClavierSouris"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Manettes"",
            ""bindingGroup"": ""Manettes"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // VroominTimeAM
        m_VroominTimeAM = asset.FindActionMap("VroominTimeAM", throwIfNotFound: true);
        m_VroominTimeAM_Turn = m_VroominTimeAM.FindAction("Turn", throwIfNotFound: true);
        m_VroominTimeAM_Accelerate = m_VroominTimeAM.FindAction("Accelerate", throwIfNotFound: true);
        // MenuinTimeAM
        m_MenuinTimeAM = asset.FindActionMap("MenuinTimeAM", throwIfNotFound: true);
        m_MenuinTimeAM_Turn = m_MenuinTimeAM.FindAction("Turn", throwIfNotFound: true);
        m_MenuinTimeAM_Accelerate = m_MenuinTimeAM.FindAction("Accelerate", throwIfNotFound: true);
        m_MenuinTimeAM_Leave = m_MenuinTimeAM.FindAction("Leave", throwIfNotFound: true);
        // TileinTime
        m_TileinTime = asset.FindActionMap("TileinTime", throwIfNotFound: true);
        m_TileinTime_Left = m_TileinTime.FindAction("Left", throwIfNotFound: true);
        m_TileinTime_Debug = m_TileinTime.FindAction("Debug", throwIfNotFound: true);
        // Vide
        m_Vide = asset.FindActionMap("Vide", throwIfNotFound: true);
        m_Vide_Newaction = m_Vide.FindAction("New action", throwIfNotFound: true);
    }

    ~@CarInput()
    {
        UnityEngine.Debug.Assert(!m_VroominTimeAM.enabled, "This will cause a leak and performance issues, CarInput.VroominTimeAM.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MenuinTimeAM.enabled, "This will cause a leak and performance issues, CarInput.MenuinTimeAM.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_TileinTime.enabled, "This will cause a leak and performance issues, CarInput.TileinTime.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Vide.enabled, "This will cause a leak and performance issues, CarInput.Vide.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VroominTimeAM
    private readonly InputActionMap m_VroominTimeAM;
    private List<IVroominTimeAMActions> m_VroominTimeAMActionsCallbackInterfaces = new List<IVroominTimeAMActions>();
    private readonly InputAction m_VroominTimeAM_Turn;
    private readonly InputAction m_VroominTimeAM_Accelerate;
    public struct VroominTimeAMActions
    {
        private @CarInput m_Wrapper;
        public VroominTimeAMActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_VroominTimeAM_Turn;
        public InputAction @Accelerate => m_Wrapper.m_VroominTimeAM_Accelerate;
        public InputActionMap Get() { return m_Wrapper.m_VroominTimeAM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VroominTimeAMActions set) { return set.Get(); }
        public void AddCallbacks(IVroominTimeAMActions instance)
        {
            if (instance == null || m_Wrapper.m_VroominTimeAMActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VroominTimeAMActionsCallbackInterfaces.Add(instance);
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @Accelerate.started += instance.OnAccelerate;
            @Accelerate.performed += instance.OnAccelerate;
            @Accelerate.canceled += instance.OnAccelerate;
        }

        private void UnregisterCallbacks(IVroominTimeAMActions instance)
        {
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @Accelerate.started -= instance.OnAccelerate;
            @Accelerate.performed -= instance.OnAccelerate;
            @Accelerate.canceled -= instance.OnAccelerate;
        }

        public void RemoveCallbacks(IVroominTimeAMActions instance)
        {
            if (m_Wrapper.m_VroominTimeAMActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVroominTimeAMActions instance)
        {
            foreach (var item in m_Wrapper.m_VroominTimeAMActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VroominTimeAMActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VroominTimeAMActions @VroominTimeAM => new VroominTimeAMActions(this);

    // MenuinTimeAM
    private readonly InputActionMap m_MenuinTimeAM;
    private List<IMenuinTimeAMActions> m_MenuinTimeAMActionsCallbackInterfaces = new List<IMenuinTimeAMActions>();
    private readonly InputAction m_MenuinTimeAM_Turn;
    private readonly InputAction m_MenuinTimeAM_Accelerate;
    private readonly InputAction m_MenuinTimeAM_Leave;
    public struct MenuinTimeAMActions
    {
        private @CarInput m_Wrapper;
        public MenuinTimeAMActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_MenuinTimeAM_Turn;
        public InputAction @Accelerate => m_Wrapper.m_MenuinTimeAM_Accelerate;
        public InputAction @Leave => m_Wrapper.m_MenuinTimeAM_Leave;
        public InputActionMap Get() { return m_Wrapper.m_MenuinTimeAM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuinTimeAMActions set) { return set.Get(); }
        public void AddCallbacks(IMenuinTimeAMActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuinTimeAMActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuinTimeAMActionsCallbackInterfaces.Add(instance);
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @Accelerate.started += instance.OnAccelerate;
            @Accelerate.performed += instance.OnAccelerate;
            @Accelerate.canceled += instance.OnAccelerate;
            @Leave.started += instance.OnLeave;
            @Leave.performed += instance.OnLeave;
            @Leave.canceled += instance.OnLeave;
        }

        private void UnregisterCallbacks(IMenuinTimeAMActions instance)
        {
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @Accelerate.started -= instance.OnAccelerate;
            @Accelerate.performed -= instance.OnAccelerate;
            @Accelerate.canceled -= instance.OnAccelerate;
            @Leave.started -= instance.OnLeave;
            @Leave.performed -= instance.OnLeave;
            @Leave.canceled -= instance.OnLeave;
        }

        public void RemoveCallbacks(IMenuinTimeAMActions instance)
        {
            if (m_Wrapper.m_MenuinTimeAMActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuinTimeAMActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuinTimeAMActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuinTimeAMActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuinTimeAMActions @MenuinTimeAM => new MenuinTimeAMActions(this);

    // TileinTime
    private readonly InputActionMap m_TileinTime;
    private List<ITileinTimeActions> m_TileinTimeActionsCallbackInterfaces = new List<ITileinTimeActions>();
    private readonly InputAction m_TileinTime_Left;
    private readonly InputAction m_TileinTime_Debug;
    public struct TileinTimeActions
    {
        private @CarInput m_Wrapper;
        public TileinTimeActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_TileinTime_Left;
        public InputAction @Debug => m_Wrapper.m_TileinTime_Debug;
        public InputActionMap Get() { return m_Wrapper.m_TileinTime; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TileinTimeActions set) { return set.Get(); }
        public void AddCallbacks(ITileinTimeActions instance)
        {
            if (instance == null || m_Wrapper.m_TileinTimeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TileinTimeActionsCallbackInterfaces.Add(instance);
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Debug.started += instance.OnDebug;
            @Debug.performed += instance.OnDebug;
            @Debug.canceled += instance.OnDebug;
        }

        private void UnregisterCallbacks(ITileinTimeActions instance)
        {
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Debug.started -= instance.OnDebug;
            @Debug.performed -= instance.OnDebug;
            @Debug.canceled -= instance.OnDebug;
        }

        public void RemoveCallbacks(ITileinTimeActions instance)
        {
            if (m_Wrapper.m_TileinTimeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITileinTimeActions instance)
        {
            foreach (var item in m_Wrapper.m_TileinTimeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TileinTimeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TileinTimeActions @TileinTime => new TileinTimeActions(this);

    // Vide
    private readonly InputActionMap m_Vide;
    private List<IVideActions> m_VideActionsCallbackInterfaces = new List<IVideActions>();
    private readonly InputAction m_Vide_Newaction;
    public struct VideActions
    {
        private @CarInput m_Wrapper;
        public VideActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Vide_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Vide; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VideActions set) { return set.Get(); }
        public void AddCallbacks(IVideActions instance)
        {
            if (instance == null || m_Wrapper.m_VideActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VideActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IVideActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IVideActions instance)
        {
            if (m_Wrapper.m_VideActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVideActions instance)
        {
            foreach (var item in m_Wrapper.m_VideActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VideActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VideActions @Vide => new VideActions(this);
    private int m_ClavierSourisSchemeIndex = -1;
    public InputControlScheme ClavierSourisScheme
    {
        get
        {
            if (m_ClavierSourisSchemeIndex == -1) m_ClavierSourisSchemeIndex = asset.FindControlSchemeIndex("ClavierSouris");
            return asset.controlSchemes[m_ClavierSourisSchemeIndex];
        }
    }
    private int m_ManettesSchemeIndex = -1;
    public InputControlScheme ManettesScheme
    {
        get
        {
            if (m_ManettesSchemeIndex == -1) m_ManettesSchemeIndex = asset.FindControlSchemeIndex("Manettes");
            return asset.controlSchemes[m_ManettesSchemeIndex];
        }
    }
    public interface IVroominTimeAMActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnAccelerate(InputAction.CallbackContext context);
    }
    public interface IMenuinTimeAMActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnAccelerate(InputAction.CallbackContext context);
        void OnLeave(InputAction.CallbackContext context);
    }
    public interface ITileinTimeActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnDebug(InputAction.CallbackContext context);
    }
    public interface IVideActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
