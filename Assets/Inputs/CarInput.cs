//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Inputs/CarInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarInput"",
    ""maps"": [
        {
            ""name"": ""VroominTimeAM"",
            ""id"": ""8ebb5754-0417-4f56-a5d7-0ee1ec78af87"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""e78ec867-74b7-4815-a57f-ad8637ca553a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Value"",
                    ""id"": ""d2a06e32-7475-40a2-977b-f22343017899"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""bb4882a0-d9a1-472e-b9eb-f8f3807306c7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""436048cf-bfc5-443c-a9ad-4ebd4f4c18b5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""651b0568-1c3f-4c71-b0b1-7bf76c000806"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d39f7663-a4f7-450e-8663-091acbe78d87"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5bde7845-d5c3-4d25-a970-0353b45100bc"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2369de8a-5b60-406e-8e83-d4b9ab8e1788"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c4b8205e-5731-40eb-96a2-49936de94493"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""41accfe8-2b73-40ea-be3a-54897a6f4d20"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f6dd7e5e-bfca-45de-98a3-66ee68e9f5e3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b19671e6-19e1-49e1-9da8-e14ffb70f68e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""327a330a-cfbc-49ea-900b-71f362a15ae8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eafc7d7c-20b7-4893-a68b-e20694c13936"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a7d6e04-4b73-43cc-a5d4-7c9eb39e44c0"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68c0f757-d2ec-4069-b5f6-79667cfe601f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuinTimeAM"",
            ""id"": ""92fc6ad6-012c-48b1-be89-1f1be350d5fd"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""655efdff-6aa1-48e2-8f63-e1d8cfa9ed04"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Value"",
                    ""id"": ""20f0cec0-95f8-4ace-a1de-a4fac71cdda8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Leave"",
                    ""type"": ""Button"",
                    ""id"": ""c2debce1-e1b8-4979-8275-59640721f618"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=3)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1c7b82dd-9149-4a47-8e10-a7bca943cb94"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""537e8b9d-9567-4a94-a39c-52ae8edaa1f9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9b2e80dc-607f-492e-973a-082456ca378b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4c95da5a-1382-4771-bcc0-2e1d0cfd6fd8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fe6f1b23-f5ee-4e1d-8a38-48c14e075e8c"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""11e415b0-25ae-4a4a-b2df-49863228b6d5"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""03d6ffc5-83d9-4dd7-9fc1-5cbc9e1a8c04"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d51f36ab-7625-4572-9632-482eb49606eb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bb44b346-efdb-4805-accf-c6fe9e6d4e9f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""38ab9dd2-01cd-4a35-a26a-9582fab95c8b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""22c40898-49ec-47c2-91f8-e16647eb6d98"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edcb03fd-5422-4e85-bba4-21b9b20c1004"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2a5a144-1a46-4fd6-ae48-fda5d37a805c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""955d4f50-261c-4d91-a4b8-3a43c9baeb5f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b97f721f-afc9-4ce8-a824-5620d4e5ca49"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Leave"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b28cfea-e4bb-4e1f-b00f-1b3cea3087a9"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Leave"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TileinTime"",
            ""id"": ""812b5286-cc96-4ae6-b519-8fa31a05ef98"",
            ""actions"": [
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""aec0e464-9521-4df7-bfab-c465f147d40b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""a80b002e-edf3-4682-931b-455449fe50b3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""b1657826-ceb0-4b41-93f2-f5423645d451"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""4cc9381a-f83a-4131-b225-603fb4ff61f4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""bcc00d4c-fbd9-4b0c-b851-e4a5450e0272"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""886674ea-c45d-4b78-b28f-4043cfc68df7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""fe1fcee9-2a71-4bf4-8a05-b3196743396d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""81dbd393-5dc2-4e39-8fe3-226af4659b27"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf8b2447-5b49-4ae0-9b6a-f0be90a66dec"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8630f287-ced4-43cc-a287-ba5cd9f93824"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76b6881d-088d-4f90-a6e2-f789f31cb1a8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bac315a1-07f2-4d89-bc7d-d9037722a74c"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ff967b2-58f6-4f98-be18-c2fa3e6ddbb3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3f5e134-84ed-4b20-a8e2-b6fa0b6492cd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63b26740-7df1-4d73-80b9-21cec02d6d88"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0186c3a-545e-4d39-9bec-5cbc4f274197"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d4218da-985b-4b40-a96f-1447460fd522"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d593668-8704-4d33-9e5f-3971d2284ec4"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f6ef0bf-f6e4-48f8-bff6-101136ffbc23"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77377ea7-810a-4cb6-822d-ff7353381709"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64023383-b5dd-4325-93bc-37f217579c20"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ClavierSouris"",
            ""bindingGroup"": ""ClavierSouris"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Manettes"",
            ""bindingGroup"": ""Manettes"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // VroominTimeAM
        m_VroominTimeAM = asset.FindActionMap("VroominTimeAM", throwIfNotFound: true);
        m_VroominTimeAM_Turn = m_VroominTimeAM.FindAction("Turn", throwIfNotFound: true);
        m_VroominTimeAM_Accelerate = m_VroominTimeAM.FindAction("Accelerate", throwIfNotFound: true);
        // MenuinTimeAM
        m_MenuinTimeAM = asset.FindActionMap("MenuinTimeAM", throwIfNotFound: true);
        m_MenuinTimeAM_Turn = m_MenuinTimeAM.FindAction("Turn", throwIfNotFound: true);
        m_MenuinTimeAM_Accelerate = m_MenuinTimeAM.FindAction("Accelerate", throwIfNotFound: true);
        m_MenuinTimeAM_Leave = m_MenuinTimeAM.FindAction("Leave", throwIfNotFound: true);
        // TileinTime
        m_TileinTime = asset.FindActionMap("TileinTime", throwIfNotFound: true);
        m_TileinTime_Confirm = m_TileinTime.FindAction("Confirm", throwIfNotFound: true);
        m_TileinTime_MoveUp = m_TileinTime.FindAction("MoveUp", throwIfNotFound: true);
        m_TileinTime_MoveRight = m_TileinTime.FindAction("MoveRight", throwIfNotFound: true);
        m_TileinTime_MoveDown = m_TileinTime.FindAction("MoveDown", throwIfNotFound: true);
        m_TileinTime_MoveLeft = m_TileinTime.FindAction("MoveLeft", throwIfNotFound: true);
        m_TileinTime_RotateLeft = m_TileinTime.FindAction("RotateLeft", throwIfNotFound: true);
        m_TileinTime_RotateRight = m_TileinTime.FindAction("RotateRight", throwIfNotFound: true);
    }

    ~@CarInput()
    {
        UnityEngine.Debug.Assert(!m_VroominTimeAM.enabled, "This will cause a leak and performance issues, CarInput.VroominTimeAM.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MenuinTimeAM.enabled, "This will cause a leak and performance issues, CarInput.MenuinTimeAM.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_TileinTime.enabled, "This will cause a leak and performance issues, CarInput.TileinTime.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VroominTimeAM
    private readonly InputActionMap m_VroominTimeAM;
    private List<IVroominTimeAMActions> m_VroominTimeAMActionsCallbackInterfaces = new List<IVroominTimeAMActions>();
    private readonly InputAction m_VroominTimeAM_Turn;
    private readonly InputAction m_VroominTimeAM_Accelerate;
    public struct VroominTimeAMActions
    {
        private @CarInput m_Wrapper;
        public VroominTimeAMActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_VroominTimeAM_Turn;
        public InputAction @Accelerate => m_Wrapper.m_VroominTimeAM_Accelerate;
        public InputActionMap Get() { return m_Wrapper.m_VroominTimeAM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VroominTimeAMActions set) { return set.Get(); }
        public void AddCallbacks(IVroominTimeAMActions instance)
        {
            if (instance == null || m_Wrapper.m_VroominTimeAMActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VroominTimeAMActionsCallbackInterfaces.Add(instance);
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @Accelerate.started += instance.OnAccelerate;
            @Accelerate.performed += instance.OnAccelerate;
            @Accelerate.canceled += instance.OnAccelerate;
        }

        private void UnregisterCallbacks(IVroominTimeAMActions instance)
        {
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @Accelerate.started -= instance.OnAccelerate;
            @Accelerate.performed -= instance.OnAccelerate;
            @Accelerate.canceled -= instance.OnAccelerate;
        }

        public void RemoveCallbacks(IVroominTimeAMActions instance)
        {
            if (m_Wrapper.m_VroominTimeAMActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVroominTimeAMActions instance)
        {
            foreach (var item in m_Wrapper.m_VroominTimeAMActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VroominTimeAMActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VroominTimeAMActions @VroominTimeAM => new VroominTimeAMActions(this);

    // MenuinTimeAM
    private readonly InputActionMap m_MenuinTimeAM;
    private List<IMenuinTimeAMActions> m_MenuinTimeAMActionsCallbackInterfaces = new List<IMenuinTimeAMActions>();
    private readonly InputAction m_MenuinTimeAM_Turn;
    private readonly InputAction m_MenuinTimeAM_Accelerate;
    private readonly InputAction m_MenuinTimeAM_Leave;
    public struct MenuinTimeAMActions
    {
        private @CarInput m_Wrapper;
        public MenuinTimeAMActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_MenuinTimeAM_Turn;
        public InputAction @Accelerate => m_Wrapper.m_MenuinTimeAM_Accelerate;
        public InputAction @Leave => m_Wrapper.m_MenuinTimeAM_Leave;
        public InputActionMap Get() { return m_Wrapper.m_MenuinTimeAM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuinTimeAMActions set) { return set.Get(); }
        public void AddCallbacks(IMenuinTimeAMActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuinTimeAMActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuinTimeAMActionsCallbackInterfaces.Add(instance);
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @Accelerate.started += instance.OnAccelerate;
            @Accelerate.performed += instance.OnAccelerate;
            @Accelerate.canceled += instance.OnAccelerate;
            @Leave.started += instance.OnLeave;
            @Leave.performed += instance.OnLeave;
            @Leave.canceled += instance.OnLeave;
        }

        private void UnregisterCallbacks(IMenuinTimeAMActions instance)
        {
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @Accelerate.started -= instance.OnAccelerate;
            @Accelerate.performed -= instance.OnAccelerate;
            @Accelerate.canceled -= instance.OnAccelerate;
            @Leave.started -= instance.OnLeave;
            @Leave.performed -= instance.OnLeave;
            @Leave.canceled -= instance.OnLeave;
        }

        public void RemoveCallbacks(IMenuinTimeAMActions instance)
        {
            if (m_Wrapper.m_MenuinTimeAMActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuinTimeAMActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuinTimeAMActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuinTimeAMActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuinTimeAMActions @MenuinTimeAM => new MenuinTimeAMActions(this);

    // TileinTime
    private readonly InputActionMap m_TileinTime;
    private List<ITileinTimeActions> m_TileinTimeActionsCallbackInterfaces = new List<ITileinTimeActions>();
    private readonly InputAction m_TileinTime_Confirm;
    private readonly InputAction m_TileinTime_MoveUp;
    private readonly InputAction m_TileinTime_MoveRight;
    private readonly InputAction m_TileinTime_MoveDown;
    private readonly InputAction m_TileinTime_MoveLeft;
    private readonly InputAction m_TileinTime_RotateLeft;
    private readonly InputAction m_TileinTime_RotateRight;
    public struct TileinTimeActions
    {
        private @CarInput m_Wrapper;
        public TileinTimeActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Confirm => m_Wrapper.m_TileinTime_Confirm;
        public InputAction @MoveUp => m_Wrapper.m_TileinTime_MoveUp;
        public InputAction @MoveRight => m_Wrapper.m_TileinTime_MoveRight;
        public InputAction @MoveDown => m_Wrapper.m_TileinTime_MoveDown;
        public InputAction @MoveLeft => m_Wrapper.m_TileinTime_MoveLeft;
        public InputAction @RotateLeft => m_Wrapper.m_TileinTime_RotateLeft;
        public InputAction @RotateRight => m_Wrapper.m_TileinTime_RotateRight;
        public InputActionMap Get() { return m_Wrapper.m_TileinTime; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TileinTimeActions set) { return set.Get(); }
        public void AddCallbacks(ITileinTimeActions instance)
        {
            if (instance == null || m_Wrapper.m_TileinTimeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TileinTimeActionsCallbackInterfaces.Add(instance);
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @RotateLeft.started += instance.OnRotateLeft;
            @RotateLeft.performed += instance.OnRotateLeft;
            @RotateLeft.canceled += instance.OnRotateLeft;
            @RotateRight.started += instance.OnRotateRight;
            @RotateRight.performed += instance.OnRotateRight;
            @RotateRight.canceled += instance.OnRotateRight;
        }

        private void UnregisterCallbacks(ITileinTimeActions instance)
        {
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @RotateLeft.started -= instance.OnRotateLeft;
            @RotateLeft.performed -= instance.OnRotateLeft;
            @RotateLeft.canceled -= instance.OnRotateLeft;
            @RotateRight.started -= instance.OnRotateRight;
            @RotateRight.performed -= instance.OnRotateRight;
            @RotateRight.canceled -= instance.OnRotateRight;
        }

        public void RemoveCallbacks(ITileinTimeActions instance)
        {
            if (m_Wrapper.m_TileinTimeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITileinTimeActions instance)
        {
            foreach (var item in m_Wrapper.m_TileinTimeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TileinTimeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TileinTimeActions @TileinTime => new TileinTimeActions(this);
    private int m_ClavierSourisSchemeIndex = -1;
    public InputControlScheme ClavierSourisScheme
    {
        get
        {
            if (m_ClavierSourisSchemeIndex == -1) m_ClavierSourisSchemeIndex = asset.FindControlSchemeIndex("ClavierSouris");
            return asset.controlSchemes[m_ClavierSourisSchemeIndex];
        }
    }
    private int m_ManettesSchemeIndex = -1;
    public InputControlScheme ManettesScheme
    {
        get
        {
            if (m_ManettesSchemeIndex == -1) m_ManettesSchemeIndex = asset.FindControlSchemeIndex("Manettes");
            return asset.controlSchemes[m_ManettesSchemeIndex];
        }
    }
    public interface IVroominTimeAMActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnAccelerate(InputAction.CallbackContext context);
    }
    public interface IMenuinTimeAMActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnAccelerate(InputAction.CallbackContext context);
        void OnLeave(InputAction.CallbackContext context);
    }
    public interface ITileinTimeActions
    {
        void OnConfirm(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnRotateLeft(InputAction.CallbackContext context);
        void OnRotateRight(InputAction.CallbackContext context);
    }
}
